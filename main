#!/usr/bin/env python3


import socket
import sys
from subprocess import DEVNULL, Popen, PIPE
from time import sleep, strftime, gmtime
from utils import is_pingable, is_avail_whois
from utils import send_report_mail
from utils import nmap
from utils import is_local_address
from logging import debug, error, info, warning, critical
import logging

logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)

try:
    try_whois = Popen(["whois"], stdout=PIPE, stderr=DEVNULL)
    info("WHOIS command was found!")
except FileNotFoundError:
    critical("WHOIS command was not found. You need to install whois command on your distro")
    exit(10)

HOSTNAME_DNS = "8.8.8.8"
HOSTNAME_DNS_PORT = 80

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((HOSTNAME_DNS, HOSTNAME_DNS_PORT))
my_ip = s.getsockname()[0]
info("current host: " + str(my_ip))
s.close()


def check_complete_status(hostnames: tuple):
    info("Starting scan all ips...")
    mail_body = ""
    for host in hostnames:

        host = host.strip()  # delete "\n" and other some shits in the strings
        mail_body += f"\nPer l'hostname {host} : \n\n"
        if not is_pingable(host):
            error(f"{host} is not pingable")
            mail_body += f"{host} is not pingable!\n"
            continue
        else:
            mail_body += f"{host} is pingable!\n"
        try:
            name_host = socket.gethostbyname(host)
            info("Name Host is : " + host + ": " + name_host)
            mail_body += f"Name host {name_host} resolved :  {name_host}\n"
        except socket.gaierror:  # If you can't ping, hostname won't exist...
            name_host = host
            error(f"Name host {name_host} can't be resolved!")
            mail_body += f"Name host {name_host} can't be resolved!\n"
            continue
            # else, if the host is not local and the public domain is unknown send the msg
        if is_avail_whois(host):
            mail_body += f"{name_host} is AVAILABLE!\n"
            error(host + " Status: is AVAILABLE.")
        else:
            mail_body += f"{name_host} is not AVAILABLE!\n"
        if nmap(host):
            mail_body += nmap(host)

    if mail_body:
        first_part = "Ecco il report del "+strftime("%Y-%m-%d %H:%M:%S", gmtime())+"\n\n"
        send_report_mail(first_part + mail_body, "", "tommydzepina@gmail.com")


if __name__ == '__main__':
    if len(sys.argv) < 2:  # if you tipe nothing exit
        print("Need more arguments")
        exit(1)
    elif len(sys.argv) == 2:  # if third element is empty exit
        host_to_check = (sys.argv[1])
        check_complete_status(host_to_check)
        exit(11)
    elif len(sys.argv) == 3:  # check right element
        if sys.argv[1] != "-f":
            print("the first is invalid.")
        else:
            file = open(sys.argv[2], "r")  # read the files with the name of host
            lines = file.readlines()
            file.close()
            check_complete_status(tuple(lines))
            exit(0)
    else:
        print("Too many arguments")
        exit(99)
